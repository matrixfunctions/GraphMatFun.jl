SHELL := /bin/bash
.SILENT: all gen run_c run_julia run_matlab run clean

N=1000 # Default matrix size

# Clean the /tmp/ directory, then generate the code, and run the experiments.
all: clean generate run

# Generate and compile test files in /tmp/.
# Nothing happens in the current directory.
generate:
	echo "Generating C, Julia, and Matlab code..."
	cd ../..; julia simulations/cputime/gen_cputime_all_lang.jl &> \
		/tmp/gen_all_lang.jl.output
	echo "Compiling generated C code..."
	# For MKL as part of Intel OneAPI, setting the environment correctly
	# requires running
	#     source /opt/intel/oneapi/setvars.sh
	# from the parent shell.
	gcc -Wall -lm -o /tmp/run_cputime_c_MKL \
		/tmp/run_cputime_c_MKL.c -lmkl_rt
	gcc -Wall -lm  -o /tmp/run_cputime_c_OpenBLAS \
		/tmp/run_cputime_c_OpenBLAS.c -lblas -llapacke

# Run experiments generated by target gen in /tmp/.
run: run_c run_julia run_matlab

run_c:
	if [ `cat /sys/devices/system/cpu/intel_pstate/no_turbo`!="1" ]; then \
		echo "Warning: CPU-time boosting seems to be enabled."; \
		echo "Disable on ubuntu: https://askubuntu.com/a/620114"; \
	fi
	for file in `ls -d /tmp/* | grep -P 'MKL|OpenBLAS'`; do \
		if [ -x "$$file" ]; then \
			$$file; \
		fi; \
	done

run_julia:
	cd /tmp/; julia run_cputime_julia_MKL.jl &> \
		/tmp/run_cputime_julia_MKL.jl.output
	cd /tmp/; julia run_cputime_julia_OpenBLAS.jl &> \
		/tmp/run_cputime_julia_OpenBLAS.jl.output

run_matlab:
	cd /tmp/; matlab -batch "run_cputime_matlab_OpenBLAS" &> \
		/tmp/run_cputime_matlab_OpenBLAS.m.output

# Clean files in the /tmp/ directory.
clean:
	echo "Removing C source and executable files..."
	for file in `ls -d /tmp/* | grep -P 'MKL|OpenBLAS'`; do \
		executable=$${file%.*}; \
		rm -f $$file $$executable; \
	done
	echo "Removing Julia files..."
	rm -f /tmp/*.jl
	echo "Removing Matlab files..."
	rm -f /tmp/*.m
